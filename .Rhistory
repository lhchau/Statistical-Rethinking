prior(normal(0, 0.4), class = b),
prior(exponential(1), class = sigma)),
iter = 2000, warmup = 500, chains = 4, cores = 4, seed = 123)
glm_total_G <- brm(
A ~ 1 + G,
data = df,
family = bernoulli(link = "logit"),
iter = 2000,
warmup = 500,
chains = 4,
cores = 4,
inits = "0",
seed = 123
)
summary(glm_total_G)
glm_direct_G <- brm(
A ~ 1 + G + D,
data = df,
family = bernoulli(link = "logit"),
iter = 2000,
warmup = 500,
chains = 4,
cores = 4,
inits = "0",
seed = 123
)
summary(glm_direct_G)
##########################################################
N <- 1000
G <- sample(1:2, size = N, replace = TRUE)
# gender 1 tends to apply to  department 1 to department 2
D <- rbern(N, ifelse(G == 1, 0.3, 0.8)) + 1
# matrix of acceptance rates [dept, gender]
accept_rate <- matrix(c(0.05, 0.2, 0.1, 0.3), nrow = 2)
# simulate acceptance
A <- rbern(N, accept_rate[D, G])
table(G, A)
glm_total_G <- brm(
A ~ 1 + G,
data = df,
family = bernoulli(link = "logit"),
iter = 2000,
warmup = 500,
chains = 4,
cores = 4,
inits = "0",
seed = 123
)
glm_direct_G <- brm(
A ~ 1 + G + D,
data = df,
family = bernoulli(link = "logit"),
iter = 2000,
warmup = 500,
chains = 4,
cores = 4,
inits = "0",
seed = 123
)
summary(glm_total_G)
summary(glm_direct_G)
dat_sim <- list(A = A, D = D, G = G)
m1 <- ulam(
alist(
A ~ bernoulli(p),
logit(p) <- a[G],
a[G] ~ normal(0, 1)
), data = dat_sim, chains = 4, cores = 4
)
m2 <- ulam(
alist(
A ~ bernoulli(p),
logit(p) <- a[G, D],
matrix[G, D]:a ~ normal(0, 1)
), data = dat_sim, chains = 4, cores = 4
)
summary(m1)
summary(m2)
data("UCBadmit")
d <- UCBadmit
dat <- list(
A = d$admit,
N = d$applications,
G = ifelse(d$applicant.gender=="female", 1, 2),
D = as.integer(d$dept)
)
# total effect gender
mG <- ulam(
alist(
A ~ binomial(N, p),
logit(p) <- a[G],
a[G] ~ normal(0, 1)
), data = dat, chains = 4, cores = 4
)
# direct effects
mGD <- ulam(
alist(
A ~ binomial(N, p),
logit(p) <- a[G, D],
matrix[G, D]:a ~ normal(0, 1)
), data = dat, chains = 4, cores = 4
)
post1 <- extract.samples(mG)
PrA_G1 <- inv_logit(post1$a[, 1])
prA_G2 <- inv_logit(post1$a[, 2])
diff_prob <- PrA_G1 - prA_G2
dens(diff_prob, lwd = 4, col = 2, xlab = "Gender contrast (probability)")
# Direct effects
post2 <- extract.samples(mGD)
PrA <- inv_logit(post2$a)
diff_prob_D_ <- sapply(1:6, function(i) PrA[,1,i] - PrA[,2,i])
plot(NULL, xlim = c(-0.2, 0.3), ylim = c(0, 25),
xlab = "Gender constrast(probability)", ylab = "Density")
for(i in 1:6) dens(diff_prob_D_[, i], lwd = 4, col = 1+i, add = TRUE)
library(tidyverse)
library(rethinking)
library(tidybayes)
library(brms)
ls(pat="^V")
pat = "VanTian"
ls(pat="^V")
x <- as.Date("2018-01-01")
month(x)
months(x)
x <- c(12L, 6L, 10L)
median(x)
x
x[1, 2 ]
x[-2]
mtrx <- matrix(1:6, 3, 2)
mtrx[, -1]
mtrx
a <- c(3, 0, TRUE)
b <- c(4, 0, FALSE)
c <- (a|b)
c
library(tidyverse)
library(rethinking)
data(cars)
m <- quap(
alist(
dist ~ dnorm(mu, sigma),
mu <- a + b*speed,
a ~ dnorm(0, 100),
b ~ dnorm(0, 10),
sigma ~ dexp(1)
), data = cars
)
set.seed(94)
post <- extract.samples(m, n = 1000)
n_samples <- 1000
logprob <- sapply(1:n_samples,
function(s){
mu <- post$a[s] + post$b[s]*cars$speed
dnorm(cars$dist, mu, post$sigma[s], log = TRUE)
})
n_cases <- nrow(cars)
n_cases
lppd <- sapply( 1:n_cases , function(i) log_sum_exp(logprob[i,]) - log(n_samples) )
pWAIC <- sapply( 1:n_cases , function(i) var(logprob[i,]) )
-2*( sum(lppd) - sum(pWAIC) )
waic_vec <- -2*( lppd - pWAIC )
sqrt( n_cases*var(waic_vec) )
library(rethinking)
data("Howell1")
Howell1
Howell1 %>% as_tibble()
data("divorce")
data("WaffleHouse")
data("WaffleHouses")
data("WaffleDivorce")
d <- WaffleDivorce
d
d <- WaffleDivorce %>% as_tibble()
d
d$A <- standardize(d$MedianAgeMarriage)
d$D <- standardize(d$Divorce)
d$M <- standardize(d$Marriage)
m5.3 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dnorm(0, 0.5),
bA ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d)
precis(m5.3)
m5.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bA*A,
a ~ dnorm(0, 0.2),
bA ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d)
m5.3 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M,
a ~ dnorm(0, 0.2),
bM ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d)
m5.2 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M,
a ~ dnorm(0, 0.2),
bM ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d)
m5.3 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dnorm(0, 0.5),
bA ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d)
precis(m5.2)
compare(m5.1, m5.2, m5.3)
precis(m5.1) %>% as_tibble()
bind_rows(
precis(m5.1) %>% as_tibble() %>%
mutate(model = "m5.1"),
precis(m5.2) %>% as_tibble() %>%
mutate(model = "m5.2"),
precis(m5.3) %>% as_tibble() %>%
mutate(model = "m5.3")
)
bind_rows(
precis(m5.1) %>% as_tibble() %>%
mutate(model = "m5.1"),
precis(m5.2) %>% as_tibble() %>%
mutate(model = "m5.2"),
precis(m5.3) %>% as_tibble() %>%
mutate(model = "m5.3")
) %>%
mutate(across(everything(), digits = 3))
bind_rows(
precis(m5.1) %>% as_tibble() %>%
mutate(model = "m5.1"),
precis(m5.2) %>% as_tibble() %>%
mutate(model = "m5.2"),
precis(m5.3) %>% as_tibble() %>%
mutate(model = "m5.3")
) %>%
mutate(across(everything(), round(., digits = 2)))
bind_rows(
precis(m5.1) %>% as_tibble() %>%
mutate(model = "m5.1"),
precis(m5.2) %>% as_tibble() %>%
mutate(model = "m5.2"),
precis(m5.3) %>% as_tibble() %>%
mutate(model = "m5.3")
) %>%
mutate(across(everything(), round(digits = 2)))
bind_rows(
precis(m5.1) %>% as_tibble() %>%
mutate(model = "m5.1"),
precis(m5.2) %>% as_tibble() %>%
mutate(model = "m5.2"),
precis(m5.3) %>% as_tibble() %>%
mutate(model = "m5.3")
) %>%
mutate(round(is.numeric(), digits = 2))
bind_rows(
precis(m5.1) %>% as_tibble() %>%
mutate(model = "m5.1"),
precis(m5.2) %>% as_tibble() %>%
mutate(model = "m5.2"),
precis(m5.3) %>% as_tibble() %>%
mutate(model = "m5.3")
)
precis(m5.3)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dlaplace(0, 1),
bA ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d)
precis(m5.3.1)
precis(m5.3)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dlaplace(0, 0.5),
bA ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d)
precis(m5.3.1)
compare(m5.3.1, m5.3)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dlaplace(0, 0.5),
bA ~ dnorm(-0.5, 0.5),
sigma ~ dexp(1)
), data = d)
precis(m5.3.1)
compare(m5.3.1, m5.3)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
c(bM, bA) ~ dlaplace(0, 0.5),
sigma ~ dexp(1)
), data = d)
precis(m5.3.1)
compare(m5.3.1, m5.3)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dlaplace(0, 0.5),
bA ~ dnorm(-0.5, 0.5),
sigma ~ dexp(1)
), data = d)
compare(m5.3.1, m5.3)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dlaplace(0, 0.2),
bA ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d)
compare(m5.3.1, m5.3)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dlaplace(0, 0.2),
bA ~ dnorm(0, 0.5),
sigma ~ dexp(1)
), data = d)
compare(m5.3.1, m5.3)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dlaplace(0, 0.2),
bA ~ dnorm(0, 1),
sigma ~ dexp(1)
), data = d)
compare(m5.3.1, m5.3)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
c(bM, bA) ~ dlaplace(0, 1),
sigma ~ dexp(1)
), data = d)
precis(m5.3.1)
compare(m5.3.1, m5.3)
extract.samples(m5.3.1)
extract.samples(m5.3.1) %>% as_tibble()
extract.samples(m5.3.1) %>%
as_tibble() %>%
ggplot(aes(x = bM, y = "")) +
geom_histogram()
extract.samples(m5.3.1) %>%
as_tibble() %>%
ggplot(aes(x = bM)) +
geom_histogram()
extract.samples(m5.3.1) %>%
as_tibble() %>%
ggplot(aes(x = bM)) +
geom_histogram() +
geom_freqpoly(dnorm(0, 0.5))
extract.samples(m5.3.1) %>%
as_tibble() %>%
ggplot(aes(x = bA)) +
geom_histogram()
extract.samples(m5.3) %>%
as_tibble() %>%
ggplot(aes(x = bM)) +
geom_histogram()
extract.samples(m5.3) %>%
as_tibble() %>%
ggplot(aes(x = bA)) +
geom_histogram()
p1 <- extract.samples(m5.3.1) %>%
as_tibble() %>%
ggplot(aes(x = bM)) +
geom_histogram()
p2 <- extract.samples(m5.3.1) %>%
as_tibble() %>%
ggplot(aes(x = bA)) +
geom_histogram()
p3 <- extract.samples(m5.3) %>%
as_tibble() %>%
ggplot(aes(x = bM)) +
geom_histogram()
p4 <- extract.samples(m5.3) %>%
as_tibble() %>%
ggplot(aes(x = bA)) +
geom_histogram()
library(patchwork)
(p1 + p2) | (p3 + p4)
(p1 + p2) / (p3 + p4)
m5.3.1 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
bM ~ dlaplace(0, 0.2),
bA ~ dnorm(0, 1),
sigma ~ dexp(1)
), data = d)
m5.3.2 <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~ dnorm(0, 0.2),
c(bM, bA) ~ dlaplace(0, 1),
sigma ~ dexp(1)
), data = d)
p1 <- extract.samples(m5.3.1) %>%
as_tibble() %>%
ggplot(aes(x = bM)) +
geom_histogram()
p2 <- extract.samples(m5.3.1) %>%
as_tibble() %>%
ggplot(aes(x = bA)) +
geom_histogram()
p3 <- extract.samples(m5.3.2) %>%
as_tibble() %>%
ggplot(aes(x = bM)) +
geom_histogram()
p4 <- extract.samples(m5.3.2) %>%
as_tibble() %>%
ggplot(aes(x = bA)) +
geom_histogram()
(p1 + p2) / (p3 + p4)
compare(m5.3.1, m5.3.2)
library(tidyverse)
library(rethinking)
library(tidybayes)
library(brms)
theme_set(theme_light())
islands <- tibble(island = paste("Island", 1:3),
a = c(0.2, 0.8, 0.05),
b = c(0.2, 0.1, 0.15),
c = c(0.2, 0.05, 0.7),
d = c(0.2, 0.025, 0.05),
e = c(0.2, 0.025, 0.05)) %>%
pivot_longer(-island, names_to = "species", values_to = "prop")
islands
islands %>%
group_by(island) %>%
summarize(prop = list(prop), .groups = "drop") %>%
mutate(entropy = map_dbl(prop, calc_entropy))
islands %>%
group_by(island) %>%
summarize(prop = list(prop), .groups = "drop") %>%
mutate(entropy = map_dbl(prop, calc_entropy))
?calc_entropy
calc_entropy <- function(x) {
avg_logprob <- sum(map_dbl(x, p_logp))
-1 * avg_logprob
}
islands %>%
group_by(island) %>%
summarize(prop = list(prop), .groups = "drop") %>%
mutate(entropy = map_dbl(prop, calc_entropy))
if(p == 0) return(0)
p_logp <- function(p){
if(p == 0) return(0)
p * log(p)
}
calc_entropy <- function(x){
avg_logprob <- sum(map_dbl(x, p_logp))
-1 * avg_logprob
}
islands %>%
group_by(island) %>%
summarize(prop = list(prop), .groups = "drop") %>%
mutate(entropy = map_dbl(prop, calc_entropy))
d_kl <- function(p, q) {
sum(p * (log(p) - log(q)))
}
crossing(model = paste("Island", 1:3),
predicts = paste("Island", 1:3)) %>%
filter(model != predicts) %>%
left_join(islands, by = c("model" = "island")) %>%
rename(model_prop = prop) %>%
left_join(islands, by = c("predicts" = "island", "species")) %>%
rename(predict_prop = prop) %>%
group_by(model, predicts) %>%
summarize(q = list(model_prop),
p = list(predict_prop),
.groups = "drop") %>%
mutate(kl_distance = map2_dbl(p, q, d_kl))
crossing(model = paste("Island", 1:3),
predicts = paste("Island", 1:3)) %>%
filter(model != predicts)
