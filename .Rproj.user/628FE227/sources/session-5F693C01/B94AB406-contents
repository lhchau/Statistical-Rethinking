---
title: "Untitled"
author: "Hoang-Chau Luong"
date: '2022-09-08'
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(tidyverse)
library(rethinking)
library(brms)
library(tidybayes)

theme_set(theme_light())

df <- read_csv("healthcare-dataset-stroke-data.csv") %>% 
  select(A = age, S = smoking_status, Y = stroke, X = heart_disease) 
str(df)

```

```{r}
lm_YX <- lm(Y ~ X, data = df)
summary(lm_YX)

lm_YXSA <- lm(Y ~ X + S + A, data = df) 
summary(lm_YXSA)

df <- df %>% 
  mutate(S = case_when(
    S == "never smoked"    ~ 0,
    S == "smokes"          ~ 1,
    S == "formerly smoked" ~ 2,
    S == "Unknown"         ~ 3,
  ))

df$S <- df$S + 1
df$A <- standardize(df$A)

m6.13 <- quap(
  alist(
    Y      ~  dnorm(mu, sigma),
    mu     <- bX*X + a[S] + bA*A,
    bX     ~  dnorm(0, 0.5),
    a[S]   ~  dnorm(0, 1),
    bA     ~  dnorm(0, 0.5),
    sigma  ~  dexp(1)
  ), data = df
)

precis(m6.13, depth = 2)
```

```{r}
head(df)
```

```{r}
# load libraries
library(tidyverse) # metapackage of all tidyverse packages
library(naniar) # handling missing data
library(skimr) # quick overview over the dataset
library(caret) # ML toolkit
library(MLmetrics) # F1 Score
library(imbalance) # algorithms to deal with imbalanced datasets
library(gridExtra) # display plots in grids
library(patchwork) # arrange plots side by side

# set a seed for reproducible results
set.seed(88)

# custom plot size function
fig <- function(width, heigth){
     options(repr.plot.width = width, repr.plot.height = heigth)
}

## ggplot custom theme
theme_bigfont <- theme(plot.title = element_text(size=22),
                       axis.text.x= element_text(size=15),
                       axis.text.y= element_text(size=15), 
                       axis.title=element_text(size=18),
                       legend.text = element_text(size = 14))

stroke_data <- read_csv("healthcare-dataset-stroke-data.csv")
```

```{r}
# check the first few rows
head(stroke_data)

# summary of the data
summary(stroke_data)
```

```{r}
# check unique values of categorical values
cat("Gender:")
unique(stroke_data$gender)
cat("Married:")
unique(stroke_data$ever_married)
cat("Work type:")
unique(stroke_data$work_type)
cat("Residence type:")
unique(stroke_data$Residence_type)
cat("Smoking:")
unique(stroke_data$smoking_status)
```

```{r}
# how many "N/A" values are in my dataset per column?
miss_scan_count(data = stroke_data, search = list("N/A", "Unknown"))
```

```{r}
fig(15, 8)

stroke_data %>%
  group_by(smoking_status) %>%
  summarise(count = length(smoking_status)) %>%
  mutate(smoking_status = factor(smoking_status)) %>%
  ggplot(aes(x = fct_reorder(smoking_status, count), 
             y = count, 
             fill = factor(ifelse(smoking_status=="Unknown","Unknown","Known")))) +
  geom_col() +
  geom_text(aes(label = count, x = smoking_status, y = count), size = 6, hjust = 1.5) +
  coord_flip() +
  scale_fill_manual(values = c("Unknown" = "red", "Known" = "darkgrey")) +
  labs(x = "smoking status") +
  theme(legend.position = "none") +
  theme_bigfont
```

```{r}
# replace the "N/A" in bmi
stroke_data_clean <- replace_with_na(data = stroke_data, 
                                     replace = list(bmi = c("N/A"), 
                                                    smoking_status = c("Unknown"))) %>%
    # change bmi to numeric 
    mutate(bmi = as.numeric(bmi))

# check
summary(stroke_data_clean)
unique(stroke_data_clean$smoking_status)
```

```{r}
fig(15, 8)

# visualize the missing values
vis_miss(stroke_data_clean, cluster = TRUE) + 
  theme_bigfont
```

```{r}
fig(20, 30)

# create vector of column names with
cols <- stroke_data_clean %>% 
  select(-id, -smoking_status) %>% 
  names()

vis_plots_list <- list()

for (i in 1:length(cols)) {
    vis_plots_list[[i]] <- stroke_data_clean %>% 
      arrange_at(cols[i]) %>% 
      vis_miss() + 
      labs(title = paste0("Ordered by ", cols[i]))
}

n <- length(vis_plots_list)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(vis_plots_list, ncol=nCol))
```

```{r}
fig(10, 8)

# check distribution of bmi
ggplot(stroke_data_clean, aes(x = bmi)) +
  geom_histogram() +
  labs(title = "Distribution of BMI") +
  theme_bigfont
```

```{r}
fig(10,8)

# impute median and bind shadow to evaluate imputation
stroke_data_imp <- bind_shadow(stroke_data_clean) %>% 
  impute_median_at(.vars = c("bmi")) %>%
  add_label_shadow()

# Explore the median values in bmi in the imputed dataset
ggplot(stroke_data_imp, 
       aes(x = bmi_NA, y = bmi)) + 
  geom_boxplot() +
  labs(title = "Comparison, no-missing vs. imputed values for BMI") +
  theme_bigfont
```

```{r}
stroke_data_imp <- impute_median_at(stroke_data_clean, .vars = c("bmi"))
```

```{r}
fig(16,8)

p1 <- ggplot(stroke_data_imp, 
       aes(x = smoking_status, fill = smoking_status)) + 
  geom_bar() +
  labs(title = "Before filling in NA values in smoking_status") +
  theme(legend.position = "none") +
  theme_bigfont

# fill imputation based on previous unique value in "smoking_status" column
after <- stroke_data_imp %>% 
  fill(smoking_status)
# mode imputation which leads to worse performance of models:
#mutate(across(c(smoking_status)), replace(., is.na(.), "never smoked"))

# Explore the median values in bmi in the imputed dataset
p2 <- ggplot(after, 
       aes(x = smoking_status, fill = smoking_status)) + 
  geom_bar() +
  labs(title = "After filling in NA values in smoking_status") +
  theme(legend.position = "none") +
  theme_bigfont

p1 + p2
```

```{r}
stroke_data_imp2 <- stroke_data_imp %>%
  fill(smoking_status) %>%
#mutate(across(c(smoking_status)), replace(., is.na(.), "never smoked")) %>%
  mutate(across(c(hypertension, heart_disease), factor),
        across(where(is.character), as.factor),
        across(where(is.factor), as.numeric),
        stroke = factor(ifelse(stroke == 0, "no", "yes")))
```

```{r}
stroke_data_imp2 <- stroke_data_imp2 %>%
  mutate(bmi = case_when(bmi < 18.5 ~ "underweight",
                        bmi >= 18.5 & bmi < 25 ~ "normal weight",
                        bmi >= 25 & bmi < 30 ~ "overweight",
                        bmi >= 30 ~ "obese"),
        bmi = factor(bmi, levels = c("underweight", "normal weight", "overweight", "obese"), order = TRUE))
```

```{r}
fig(10, 8)

# plot prop of people who had a stroke
stroke_data_imp2 %>%
  select(stroke) %>%
  ggplot(aes(x = stroke)) +
  geom_bar() +
  theme_bigfont

# count how many people had a stroke and the prop
stroke_data_imp2 %>%
  group_by(stroke) %>%
  summarize(n = n()) %>%
  mutate(prop = round(n / sum(n), 2))
```

```{r}
# check imbalance ratio
imbalanceRatio(as.data.frame(stroke_data_imp2), classAttr = "stroke")
```

```{r}
stroke_test <- stroke_data_imp2 %>%
  mutate(stroke = as.character(stroke),
         across(where(is.factor), as.numeric),
         stroke = factor(stroke))

stroke_oversampled <-
  oversample(
    as.data.frame(stroke_test),
    classAttr = "stroke",
    ratio = 1,
    method = "MWMOTE"
  )

head(stroke_oversampled)

stroke_oversampled %>%
  group_by(stroke) %>%
  summarize(n = n()) %>%
  mutate(prop = round(n / sum(n), 2))
```

```{r}
stroke_data_final <- stroke_oversampled %>% select(-id)
```

























